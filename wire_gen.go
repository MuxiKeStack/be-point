// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/MuxiKeStack/be-point/events"
	"github.com/MuxiKeStack/be-point/grpc"
	"github.com/MuxiKeStack/be-point/ioc"
	"github.com/MuxiKeStack/be-point/repository"
	"github.com/MuxiKeStack/be-point/repository/cache"
	"github.com/MuxiKeStack/be-point/repository/dao"
	"github.com/MuxiKeStack/be-point/service"
)

// Injectors from wire.go:

func InitApp() *App {
	logger := ioc.InitLogger()
	db := ioc.InitDB(logger)
	pointDAO := dao.NewGORMPointDAO(db)
	cmdable := ioc.InitRedis()
	pointCache := cache.NewRedisPointCache(cmdable)
	pointRepository := repository.NewCachedPointRepository(pointDAO, pointCache, logger)
	pointService := service.NewPointService(pointRepository)
	titleDAO := dao.NewGORMTitleDAO(db)
	titleRepository := repository.NewTitleRepository(titleDAO)
	titleService := ioc.InitTitleService(titleRepository, pointService)
	pointServiceServer := grpc.NewPointServiceServer(pointService, titleService)
	client := ioc.InitEtcdClient()
	server := ioc.InitGRPCxKratosServer(pointServiceServer, client, logger)
	saramaClient := ioc.InitKafka()
	evaluationServiceClient := ioc.InitEvaluationClient(client)
	answerServiceClient := ioc.InitAnswerClient(client)
	pointMaintenanceService := service.NewPointMaintenanceService(pointRepository, evaluationServiceClient, answerServiceClient)
	mySQLBinlogConsumer := events.NewMySQLBinlogConsumer(saramaClient, logger, pointMaintenanceService)
	v := ioc.InitConsumers(mySQLBinlogConsumer)
	app := &App{
		server:    server,
		consumers: v,
	}
	return app
}
